// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include <frc/DriverStation.h>
#include "Commands/RotateControlPanelToColor.h"
//#include "Subsystems/ControlPanelRotator.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

RotateControlPanelToColor::RotateControlPanelToColor(): frc::Command() {


    // Use Requires() here to declare subsystem dependencies
    // eg. Requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

std::string RotateControlPanelToColor::getColorFromFMS()
{
    std::string gameData;
    gameData = frc::DriverStation::GetInstance().GetGameSpecificMessage();
    if(gameData.length() > 0)
    {
        colorFromFMS = gameData.substr(0, 1); // B, G, R, Y
        /*
        switch (gameData[0])
        {
            case 'B' :
            //Blue case code
            break;
            case 'G' :
            //Green case code
            break;
            case 'R' :
            //Red case code
            break;
            case 'Y' :
            //Yellow case code
            break;
            default :
            //This is corrupt data
            break;
        }
        */
    } else {
        printf("\nNo color received from FMS");
    //Code for no data received yet
    }
}


// Called just before this Command runs the first time
void RotateControlPanelToColor::Initialize() {


}

// Called repeatedly when this Command is scheduled to run
void RotateControlPanelToColor::Execute() {
    //ControlPanelRotator cpr;
    //bool success = cpr.SpinToColor(3, colorFromFMS);
}

// Make this return true when this Command no longer needs to run execute()
bool RotateControlPanelToColor::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void RotateControlPanelToColor::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void RotateControlPanelToColor::Interrupted() {

}
